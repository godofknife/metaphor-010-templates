//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "metaphor_enums.bt"
typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef hfloat f16;
typedef float f32;
typedef double f64;

typedef enum<u16> {
    UseSkill = 0,
    Type1 = 1,
    Type2 = 2,
    Type3 = 3,
    Type4 = 4,
    Type5 = 5,
    Type6 = 6,
    Type7 = 7,
    Type8 = 8,
    Type9 = 9,
    SupportSkill_Maybe = 10,
    Type11 = 11,
    Type12 = 12,
    Type13 = 13,
    Type14 = 14,
    Type15 = 15,
    Type16 = 16,
    Type17 = 17,
    Type18 = 18,
    Type19 = 19,
    Type20 = 20,
    Type21 = 21,
    Type22 = 22,
    Type23 = 23,
    Type24 = 24,
    Type25 = 25,
    Type26 = 26,
    Type27 = 27,
    Type28 = 28,
    Type29 = 29,
}AIEntry_Type;

typedef struct {
    u16 field00;
    u16 field02;
    u16 field04;
    u16 Flag;
    u16 field08;
    if (Flag&0x10){
        u16 ID;
    }
    else{
        SkillID ID<name = "Skill">;
    }
    u16 field0C;
    u16 field0E;
} AIEntry <optimize=false, read=Str("Field02: %d, Flag: 0x%X, ID: %d, Field0C: %d, Field0E: %d", field02, Flag, ID, field0C, field0E)>;

typedef struct {
    u16 field00;
    u16 field02;
    u16 field04;
    u16 field06;
    u16 field08;
    u16 field0A;
    u16 field0C;
    u16 field0E;
    u16 field10;
    u16 field12;
    u16 field14;
    u16 field16;
    u16 field18;
    u16 field1A;
    u16 field1C;
    u16 field1E;
    u16 field20;
    u16 field22;
    u16 field24;
    u16 field26;
    u16 field28;
    u16 field2A;
    u16 field2C;
    u16 field2E;
    u16 field30;
    u16 field32;
    u16 field34;
    u16 field36;
    u16 field38;
    u16 field3A;
    u16 field3C;
    u16 field3E;
    u16 field40;
    u16 field42;
    u16 field44;
    u16 field46;
    u16 field48;
    u16 field4A;
    u16 field4C;
    u16 field4E;
    u16 field50;
    u16 field52;
    u16 field54;
    u16 field56;
    u16 field58;
    u16 field5A;
    u16 field5C;
    u16 field5E;
    u16 field60;
    u16 field62;
    u16 field64;
    u16 field66;
    u16 field68;
    u16 field6A;
    u16 field6C;
    u16 field6E;
} Segment1 <optimize=false>;

typedef struct {
    u16 field00;
    u16 field02;
    u16 Field04;
    u16 Field06;
    u16 Field08;
    u16 Field0A;
    u32 Field0C;   
} header <optimize=false>;

header Header;
Segment1 Unknown_Segment_1;
u32 UnknownFields[88];
AIEntry Entry[300];
u16 Padding;